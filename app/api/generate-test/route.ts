import { ECBA_SYSTEM_PROMPT } from "@/shared/prompts";
import { NextRequest, NextResponse } from "next/server";
import { AzureOpenAI } from "openai";

// –¢–∏–ø–∏ –¥–ª—è –∑–∞–ø–∏—Ç—É
interface GenerateTestRequest {
  level: "ecba" | "ccba" | "cbap";
  questionCount: number;
  language: string;
  customPrompt?: string;
  testType?: "basic" | "detailed" | "babok" | "practical";
  systemPrompt?: string; // –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
}

interface TestQuestion {
  id: number;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
  knowledgeArea?: string;
  difficulty: "easy" | "medium" | "hard";
}

interface GenerateTestResponse {
  success: boolean;
  response: string;
  error?: string;
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Azure OpenAI –∫–ª—ñ—î–Ω—Ç–∞
const azureOpenAI = new AzureOpenAI({
  apiKey: process.env.AZURE_OPENAI_API_KEY,
  endpoint: process.env.AZURE_OPENAI_ENDPOINT,
  apiVersion: process.env.AZURE_OPENAI_API_VERSION,
});

// ID –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑ .env —Ñ–∞–π–ª—É
const ASSISTANT_ID = process.env.AZURE_OPENAI_ASSISTANT_ID;

// –°–∏—Å—Ç–µ–º–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
const defaultSystemPrompts = {
  ecba: ECBA_SYSTEM_PROMPT,
  ccba: `–°—Ç–≤–æ—Ä–∏ {{questions}} —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó CCBA (Certification of Capability in Business Analysis).
–í–∫–ª—é—á–∏ –ø–∏—Ç–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ, —è–∫—ñ –ø–æ–∫—Ä–∏–≤–∞—é—Ç—å –≤—Å—ñ –æ–±–ª–∞—Å—Ç—ñ –∑–Ω–∞–Ω—å BABOK, —Ç–µ—Ö–Ω—ñ–∫–∏ —Ç–∞ –±–∞–∑–æ–≤—ñ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó.
–ü–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ 3-5 —Ä–æ–∫—ñ–≤ —É —Å—Ñ–µ—Ä—ñ BA.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π {{language}} –º–æ–≤–æ—é.`,
  cbap: `–°—Ç–≤–æ—Ä–∏ {{questions}} —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó CBAP (Certified Business Analysis Professional).
–°—Ç–≤–æ—Ä–∏ —Å–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫—ñ –≤–∏–º–∞–≥–∞—é—Ç—å –≥–ª–∏–±–æ–∫–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è BABOK, –∞–Ω–∞–ª—ñ–∑—É —Å–∫–ª–∞–¥–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ —Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ–≥–æ –º–∏—Å–ª–µ–Ω–Ω—è.
–ü–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –ø—ñ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–ª—è –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏—Ö –±—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ—Ç–∏–∫—ñ–≤ –∑ –¥–æ—Å–≤—ñ–¥–æ–º —Ä–æ–±–æ—Ç–∏ 5+ —Ä–æ–∫—ñ–≤.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π {{language}} –º–æ–≤–æ—é.`,
};

export async function POST(request: NextRequest) {
  try {
    const body: GenerateTestRequest = await request.json();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    if (!body.level || !["ecba", "ccba", "cbap"].includes(body.level)) {
      return NextResponse.json(
        { success: false, error: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó" },
        { status: 400 }
      );
    }

    if (
      !body.questionCount ||
      body.questionCount < 1 ||
      body.questionCount > 200
    ) {
      return NextResponse.json(
        { success: false, error: "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 200" },
        { status: 400 }
      );
    }

    if (!body.language) {
      return NextResponse.json(
        { success: false, error: "–ú–æ–≤–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞" },
        { status: 400 }
      );
    }

    if (!ASSISTANT_ID) {
      return NextResponse.json(
        { success: false, error: "ID –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π" },
        { status: 500 }
      );
    }

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
    const baseSystemPrompt = defaultSystemPrompts[body.level];

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É
    const testType = body.testType || "basic";
    let userPrompt = body.customPrompt || "";

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–º—ñ–Ω–æ—é –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤
    console.log("üîç –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É:");
    console.log("  - level:", body.level);
    console.log("  - questionCount:", body.questionCount);
    console.log("  - language:", body.language);
    console.log("  - testType:", testType);
    console.log(
      "  - baseSystemPrompt (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤):",
      baseSystemPrompt.substring(0, 100) + "..."
    );
    console.log(
      "  - userPrompt (–ø–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤):",
      userPrompt.substring(0, 100) + "..."
    );

    // –ó–∞–º—ñ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤ —É –∫–∞—Å—Ç–æ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    userPrompt = userPrompt
      .replace(/\{\{questions\}\}/g, body.questionCount.toString())
      .replace(/\{\{level\}\}/g, body.level.toUpperCase())
      .replace(/\{\{language\}\}/g, body.language);

    console.log(
      "üìù –ö–∞—Å—Ç–æ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –ø—ñ—Å–ª—è –∑–∞–º—ñ–Ω–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤ (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤):",
      userPrompt.substring(0, 200) + "..."
    );

    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const formatInstructions = `

–ù–∞–¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —á–∏—Å—Ç–æ–º—É Markdown, –±–µ–∑ JSON.
–ú–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${body.language}
–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞–ø–∏—Å–∞–Ω—ñ –º–æ–≤–æ—é: ${body.language}`;

    // –ü–æ–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç: –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π + –∫–∞—Å—Ç–æ–º–Ω–∏–π + —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    const fullPrompt = `${baseSystemPrompt}\n\n${userPrompt}\n\n${formatInstructions}`;

    console.log(
      "üöÄ –ü–æ–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM (–¥–æ–≤–∂–∏–Ω–∞):",
      fullPrompt.length,
      "—Å–∏–º–≤–æ–ª—ñ–≤"
    );
    console.log(
      "üöÄ –ü–æ–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç (–ø–µ—Ä—à—ñ 300 —Å–∏–º–≤–æ–ª—ñ–≤):",
      fullPrompt.substring(0, 300) + "..."
    );

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç–∞ –ª–æ–≥—É—î–º–æ tools
    const assistant = await azureOpenAI.beta.assistants.retrieve(ASSISTANT_ID);
    console.log(
      "üîß Assistant tools:",
      (assistant.tools || []).map((t: any) => t.type)
    );
    if (!assistant.tools?.some((t: any) => t.type === "code_interpreter")) {
      console.warn(
        "‚ö†Ô∏è –£–≤–∞–≥–∞: —É –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π code_interpreter —É —Å–ø–∏—Å–∫—É tools"
      );
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ thread
    const thread = await azureOpenAI.beta.threads.create();

    // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ thread
    await azureOpenAI.beta.threads.messages.create(thread.id, {
      role: "user",
      content: fullPrompt,
    });

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const run = await azureOpenAI.beta.threads.runs.create(thread.id, {
      assistant_id: ASSISTANT_ID,
    });

    // –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    let runStatus = await azureOpenAI.beta.threads.runs.retrieve(
      thread.id,
      run.id
    );

    // Polling –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (–º–∞–∫—Å–∏–º—É–º 120 —Å–µ–∫—É–Ω–¥)
    let attempts = 0;
    const maxAttempts = 600;

    while (
      (runStatus.status === "queued" || runStatus.status === "in_progress") &&
      attempts < maxAttempts
    ) {
      await new Promise((resolve) => setTimeout(resolve, 1000));
      runStatus = await azureOpenAI.beta.threads.runs.retrieve(
        thread.id,
        run.id
      );
      attempts++;
    }

    if (runStatus.status === "completed") {
      // –î—ñ—Å—Ç–∞—î–º–æ –∫—Ä–æ–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è run, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è code interpreter
      let codeInterpreterUsed = false;
      try {
        const steps = await azureOpenAI.beta.threads.runs.steps.list(
          thread.id,
          run.id
        );
        console.log("üß™ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ run:", steps.data.length);
        for (const step of steps.data) {
          const details: any =
            (step as any).step_details || (step as any).details;
          const toolCalls: any[] = details?.tool_calls || [];
          for (const tc of toolCalls) {
            const type = tc.type || tc?.tool_call_type;
            if (type === "code_interpreter" || type === "code") {
              codeInterpreterUsed = true;
            }
          }
        }
        console.log("üß™ Code Interpreter –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ:", codeInterpreterUsed);
      } catch (e) {
        console.warn(
          "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—Ä–æ–∫–∏ run –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ code interpreter:",
          e
        );
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ thread
      const messages = await azureOpenAI.beta.threads.messages.list(thread.id);
      console.log("üß™ –í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É thread:", messages.data.length);

      // –ü—ñ–¥–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑ —Ç–µ–∫—Å—Ç–æ–º —ñ –æ–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ —á–∞—Å—Ç–∏–Ω–∏
      const pickAssistantText = (): string => {
        for (const msg of messages.data) {
          if (msg.role !== "assistant") continue;
          const types = (msg.content || []).map((c: any) => c.type);
          console.log("üß™ –¢–∏–ø–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞:", types);
          const textParts = (msg.content || [])
            .filter((c: any) => c.type === "text" && c.text)
            .map((c: any) =>
              typeof c.text === "string" ? c.text : c.text.value
            )
            .filter(Boolean);
          if (textParts.length) {
            return textParts.join("\n").trim();
          }
        }
        return "";
      };

      // –ó–Ω–∞–π—Ç–∏ –ø–µ—Ä—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –ø–æ–≤–µ—Ä–Ω—É—Ç–µ —è–∫ image_file, —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –π–æ–≥–æ —è–∫ data URI
      const pickFirstImageFileId = (): string | null => {
        for (const msg of messages.data) {
          if (msg.role !== "assistant") continue;
          for (const c of msg.content || []) {
            if (c.type === "image_file" && c.image_file?.file_id) {
              return c.image_file.file_id;
            }
          }
        }
        return null;
      };

      let imageDataUri: string | null = null;
      const imageFileId = pickFirstImageFileId();
      if (imageFileId) {
        try {
          const meta = await azureOpenAI.files.retrieve(imageFileId);
          const filename = (meta as any)?.filename || "";
          let mime = "image/png";
          if (
            filename.toLowerCase().endsWith(".jpg") ||
            filename.toLowerCase().endsWith(".jpeg")
          )
            mime = "image/jpeg";
          else if (filename.toLowerCase().endsWith(".png")) mime = "image/png";

          const fileResp: any = await azureOpenAI.files.content(imageFileId);
          let arrayBuffer: ArrayBuffer | null = null;
          if (typeof fileResp.arrayBuffer === "function") {
            arrayBuffer = await fileResp.arrayBuffer();
          } else if (fileResp?.data) {
            arrayBuffer = fileResp.data as ArrayBuffer;
          } else if (typeof fileResp.blob === "function") {
            const blob = await fileResp.blob();
            arrayBuffer = await blob.arrayBuffer();
          } else if (
            fileResp?.body &&
            typeof fileResp.body.arrayBuffer === "function"
          ) {
            arrayBuffer = await fileResp.body.arrayBuffer();
          }

          if (arrayBuffer) {
            const base64 = Buffer.from(arrayBuffer as any).toString("base64");
            imageDataUri = `data:${mime};base64,${base64}`;
            console.log("üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞:", {
              imageFileId,
              filename,
              mime,
              size: (arrayBuffer as any).byteLength,
            });
          } else {
            console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–π—Ç–∏ –∑ image_file –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ");
          }
        } catch (e) {
          console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ image_file –∫–æ–Ω—Ç–µ–Ω—Ç:", e);
        }
      }

      const responseText = pickAssistantText();
      const finalMarkdown = (() => {
        if (responseText && imageDataUri)
          return `${responseText}\n\n![Generated Image](${imageDataUri})`;
        if (responseText) return responseText;
        if (imageDataUri) return `![Generated Image](${imageDataUri})`;
        return "";
      })();

      if (finalMarkdown) {
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏—Ä–∏–π —Ç–µ–∫—Å—Ç (Markdown) –∑ –º–æ–∂–ª–∏–≤–∏–º –≤–±—É–¥–æ–≤–∞–Ω–∏–º –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º + –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        return new NextResponse(finalMarkdown, {
          status: 200,
          headers: {
            "Content-Type": "text/plain; charset=utf-8",
            "X-Code-Interpreter-Used": codeInterpreterUsed ? "true" : "false",
            "X-Thread-Id": thread.id,
            "X-Run-Id": run.id,
            "X-Image-Embedded": imageDataUri ? "true" : "false",
          },
        });
      }

      // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É —ñ –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 200 –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º
      console.warn(
        "‚ö†Ô∏è –ê—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–∞ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å."
      );
      return new NextResponse(
        "‚ö†Ô∏è –ê—Å–∏—Å—Ç–µ–Ω—Ç –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ Markdown —Ç–∞ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å. –î–æ–¥–∞–π—Ç–µ –¥–æ –ø—Ä–æ–º–ø—Ç—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –≤—Å—Ç–∞–≤–ª—è—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ —ñ–Ω–ª–∞–π–Ω data:image/png;base64,... —É Markdown.",
        {
          status: 200,
          headers: {
            "Content-Type": "text/plain; charset=utf-8",
            "X-Code-Interpreter-Used": codeInterpreterUsed ? "true" : "false",
            "X-Thread-Id": thread.id,
            "X-Run-Id": run.id,
            "X-Image-Embedded": "false",
          },
        }
      );
    } else if (runStatus.status === "failed") {
      console.error("–ê—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∑–º—ñ–≥ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç:", runStatus.last_error);
      return NextResponse.json(
        {
          success: false,
          error: `–ê—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∑–º—ñ–≥ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç: ${
            runStatus.last_error?.message || "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"
          }`,
        },
        { status: 500 }
      );
    } else if (attempts >= maxAttempts) {
      return NextResponse.json(
        { success: false, error: "–¢–∞–π–º–∞—É—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É (120 —Å–µ–∫—É–Ω–¥)" },
        { status: 408 }
      );
    }

    return NextResponse.json(
      { success: false, error: "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –∞—Å–∏—Å—Ç–µ–Ω—Ç–æ–º" },
      { status: 500 }
    );
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—É:", error);

    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞",
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: "API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î –∑ Azure Assistants API",
    endpoints: {
      POST: "/api/generate-test - –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å",
      GET: "/api/generate-test - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API",
    },
    supportedLevels: ["ecba", "ccba", "cbap"],
    supportedTestTypes: ["basic", "detailed", "babok", "practical"],
    features: [
      "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
      "Azure Assistants API —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è",
      "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è threads —Ç–∞ runs",
      "–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Ç–∞–π–º–∞—É—Ç (120 —Å–µ–∫—É–Ω–¥)",
    ],
    assistantId: ASSISTANT_ID || "–Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π",
  });
}

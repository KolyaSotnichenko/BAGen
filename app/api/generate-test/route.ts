import { ECBA_SYSTEM_PROMPT } from "@/shared/prompts";
import { NextRequest, NextResponse } from "next/server";
import { AzureOpenAI } from "openai";
import { RunCreateParamsNonStreaming } from "openai/resources/beta/threads/runs/runs.mjs";
import { marked } from "marked"; // –¥–æ–¥–∞–Ω–æ: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è Markdown ‚Üí HTML

// –¢–∏–ø–∏ –¥–ª—è –∑–∞–ø–∏—Ç—É
interface GenerateTestRequest {
  level: "ecba" | "ccba" | "cbap";
  questionCount: number;
  language: string;
  customPrompt?: string;
  testType?: "basic" | "detailed" | "babok" | "practical";
  systemPrompt?: string; // –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Azure OpenAI –∫–ª—ñ—î–Ω—Ç–∞
const azureOpenAI = new AzureOpenAI({
  apiKey: process.env.AZURE_OPENAI_API_KEY,
  endpoint: process.env.AZURE_OPENAI_ENDPOINT,
  apiVersion: process.env.AZURE_OPENAI_API_VERSION,
});

// ID –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑ .env —Ñ–∞–π–ª—É
const ASSISTANT_ID = process.env.AZURE_OPENAI_ASSISTANT_ID;

// –°–∏—Å—Ç–µ–º–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
const defaultSystemPrompts = {
  ecba: ECBA_SYSTEM_PROMPT,
  ccba: `–°—Ç–≤–æ—Ä–∏ {{questions}} —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó CCBA (Certification of Capability in Business Analysis).
–í–∫–ª—é—á–∏ –ø–∏—Ç–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ, —è–∫—ñ –ø–æ–∫—Ä–∏–≤–∞—é—Ç—å –≤—Å—ñ –æ–±–ª–∞—Å—Ç—ñ –∑–Ω–∞–Ω—å BABOK, —Ç–µ—Ö–Ω—ñ–∫–∏ —Ç–∞ –±–∞–∑–æ–≤—ñ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó.
–ü–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ 3-5 —Ä–æ–∫—ñ–≤ —É —Å—Ñ–µ—Ä—ñ BA.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π {{language}} –º–æ–≤–æ—é.`,
  cbap: `–°—Ç–≤–æ—Ä–∏ {{questions}} —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó CBAP (Certified Business Analysis Professional).
–°—Ç–≤–æ—Ä–∏ —Å–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫—ñ –≤–∏–º–∞–≥–∞—é—Ç—å –≥–ª–∏–±–æ–∫–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è BABOK, –∞–Ω–∞–ª—ñ–∑—É —Å–∫–ª–∞–¥–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ —Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ–≥–æ –º–∏—Å–ª–µ–Ω–Ω—è.
–ü–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –ø—ñ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–ª—è –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏—Ö –±—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ—Ç–∏–∫—ñ–≤ –∑ –¥–æ—Å–≤—ñ–¥–æ–º —Ä–æ–±–æ—Ç–∏ 5+ —Ä–æ–∫—ñ–≤.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π {{language}} –º–æ–≤–æ—é.`,
};

export async function POST(request: NextRequest) {
  try {
    const body: GenerateTestRequest = await request.json();

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    if (!body.level || !["ecba", "ccba", "cbap"].includes(body.level)) {
      return NextResponse.json(
        { success: false, error: "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó" },
        { status: 400 }
      );
    }

    if (
      !body.questionCount ||
      body.questionCount < 1 ||
      body.questionCount > 200
    ) {
      return NextResponse.json(
        { success: false, error: "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 200" },
        { status: 400 }
      );
    }

    if (!body.language) {
      return NextResponse.json(
        { success: false, error: "–ú–æ–≤–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞" },
        { status: 400 }
      );
    }

    if (!ASSISTANT_ID) {
      return NextResponse.json(
        { success: false, error: "ID –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π" },
        { status: 500 }
      );
    }

    // –î–æ–¥–∞–Ω–æ: –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—á–∞—Å, —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏)
    const startedAt = Date.now();
    let threadId: string | undefined;
    let runId: string | undefined;
    const executedRuns: string[] = [];

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç
    const baseSystemPrompt = defaultSystemPrompts[body.level];

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É
    const testType = body.testType || "basic";
    let userPrompt = body.customPrompt || "";

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–º—ñ–Ω–æ—é –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤
    console.log("üîç –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É:");
    console.log("  - level:", body.level);
    console.log("  - questionCount:", body.questionCount);
    console.log("  - language:", body.language);
    console.log("  - testType:", testType);

    // –ó–∞–º—ñ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤ —É –∫–∞—Å—Ç–æ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    userPrompt = userPrompt
      .replace(/\{\{questions\}\}/g, body.questionCount.toString())
      .replace(/\{\{level\}\}/g, body.level.toUpperCase())
      .replace(/\{\{language\}\}/g, body.language);

    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const formatInstructions = `

–ù–∞–¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —á–∏—Å—Ç–æ–º—É Markdown, –±–µ–∑ JSON.
–ú–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${body.language}
–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞–ø–∏—Å–∞–Ω—ñ –º–æ–≤–æ—é: ${body.language}`;

    // –ü–æ–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç: –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π + –∫–∞—Å—Ç–æ–º–Ω–∏–π + —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    const fullPrompt = `${baseSystemPrompt}\n\n${userPrompt}\n\n${formatInstructions}`;

    console.log(
      "üöÄ –ü–æ–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM (–¥–æ–≤–∂–∏–Ω–∞):",
      fullPrompt.length,
      "—Å–∏–º–≤–æ–ª—ñ–≤"
    );

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç–∞ –ª–æ–≥—É—î–º–æ tools
    const assistant = await azureOpenAI.beta.assistants.retrieve(ASSISTANT_ID);
    console.log(
      "üîß Assistant tools:",
      (assistant.tools || []).map((t: any) => t.type)
    );
    if (!assistant.tools?.some((t: any) => t.type === "code_interpreter")) {
      console.warn(
        "‚ö†Ô∏è –£–≤–∞–≥–∞: —É –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π code_interpreter —É —Å–ø–∏—Å–∫—É tools"
      );
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ thread
    const thread = await azureOpenAI.beta.threads.create();
    threadId = thread.id;

    // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ thread
    await azureOpenAI.beta.threads.messages.create(thread.id, {
      role: "user",
      content: fullPrompt,
    });

    const runOptions: RunCreateParamsNonStreaming = {
      assistant_id: ASSISTANT_ID,
    };
    const hasFileSearch = assistant.tools?.some(
      (t: any) => t.type === "file_search"
    );
    const hasCodeInterpreter = assistant.tools?.some(
      (t: any) => t.type === "code_interpreter"
    );

    if (hasFileSearch) {
      runOptions.tool_choice = { type: "file_search" };
      console.log("üß™ –§–∞–∑–∞ 1: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é tool_choice=file_search");
    } else if (hasCodeInterpreter) {
      runOptions.tool_choice = { type: "code_interpreter" };
      console.log(
        "üß™ –§–∞–∑–∞ 1: file_search –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é code_interpreter"
      );
    } else {
      console.log(
        "üß™ –§–∞–∑–∞ 1: –∂–æ–¥–µ–Ω –∑ tools (file_search/code_interpreter) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∑–∞–ø—É—Å–∫–∞—é –±–µ–∑ tool_choice"
      );
    }

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π run (–§–∞–∑–∞ 1)
    const run = await azureOpenAI.beta.threads.runs.create(
      thread.id,
      runOptions
    );
    runId = run.id;
    executedRuns.push(run.id);

    // –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –§–∞–∑–∏ 1
    let runStatus = await azureOpenAI.beta.threads.runs.retrieve(
      thread.id,
      run.id
    );

    // Polling –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (–º–∞–∫—Å–∏–º—É–º 120 —Å–µ–∫—É–Ω–¥)
    let attempts = 0;
    const maxAttempts = 600;

    while (
      (runStatus.status === "queued" || runStatus.status === "in_progress") &&
      attempts < maxAttempts
    ) {
      await new Promise((resolve) => setTimeout(resolve, 1000));
      runStatus = await azureOpenAI.beta.threads.runs.retrieve(
        thread.id,
        run.id
      );
      attempts++;
    }

    console.log("üèÅ Run status after polling (Phase 1):", {
      status: runStatus.status,
      attempts,
      elapsedMs: Date.now() - startedAt,
      threadId,
      runId,
    });

    if (runStatus.status === "completed") {
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –§–∞–∑–∏ 1
      const messagesAfterPhase1 = await azureOpenAI.beta.threads.messages.list(
        thread.id
      );
      const assistantTexts = (messagesAfterPhase1.data || [])
        .filter((m: any) => m.role === "assistant")
        .flatMap((m: any) =>
          (m.content || [])
            .filter((c: any) => c.type === "text")
            .map((c: any) =>
              typeof c.text === "string" ? c.text : c.text?.value || ""
            )
        );
      const combinedAssistantText = assistantTexts.join("\n\n");

      // –í–∏—Ç—è–≥—É—î–º–æ –∫–æ–¥–æ–≤—ñ –±–ª–æ–∫–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      const extractCodeBlocks = (
        text: string
      ): Array<{ lang: string; code: string }> => {
        const blocks: Array<{ lang: string; code: string }> = [];
        const re = /```([\w+-]*)?\n([\s\S]*?)```/g;
        let match;
        while ((match = re.exec(text)) !== null) {
          const lang = (match[1] || "").trim();
          const code = (match[2] || "").trim();
          if (code) blocks.push({ lang, code });
        }
        return blocks;
      };
      const codeBlocks = extractCodeBlocks(combinedAssistantText);
      console.log(
        "üîé –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤–∏—Ö –±–ª–æ–∫—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –§–∞–∑–∏ 1:",
        codeBlocks.length
      );

      // –Ø–∫—â–æ —î –∫–æ–¥ ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ –§–∞–∑—É 2: –≤–∏–∫–æ–Ω–∞–π –∫–æ–¥ —É code_interpreter
      let secondRunId: string | undefined;
      let secondRunStatus: any | undefined;

      if (codeBlocks.length > 0 && hasCodeInterpreter) {
        const followUpContent =
          `–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ–Ω–∞–π –Ω–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∏–∂—á–µ –∫–æ–¥ —É code_interpreter.\n\n` +
          codeBlocks
            .map((b) => `\`\`\`${b.lang || ""}\n${b.code}\n\`\`\``)
            .join("\n\n");

        await azureOpenAI.beta.threads.messages.create(thread.id, {
          role: "user",
          content: followUpContent,
        });

        const run2Options: RunCreateParamsNonStreaming = {
          assistant_id: ASSISTANT_ID,
          tool_choice: { type: "code_interpreter" },
        };
        console.log("üß™ –§–∞–∑–∞ 2: –∑–∞–ø—É—Å–∫ code_interpreter —ñ–∑ –ø–µ—Ä–µ–¥–∞–Ω–∏–º –∫–æ–¥–æ–º");
        const run2 = await azureOpenAI.beta.threads.runs.create(
          thread.id,
          run2Options
        );
        secondRunId = run2.id;
        executedRuns.push(run2.id);

        // –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –§–∞–∑–∏ 2
        secondRunStatus = await azureOpenAI.beta.threads.runs.retrieve(
          thread.id,
          run2.id
        );
        let attempts2 = 0;
        while (
          (secondRunStatus.status === "queued" ||
            secondRunStatus.status === "in_progress") &&
          attempts2 < maxAttempts
        ) {
          await new Promise((resolve) => setTimeout(resolve, 1000));
          secondRunStatus = await azureOpenAI.beta.threads.runs.retrieve(
            thread.id,
            run2.id
          );
          attempts2++;
        }
        console.log("üèÅ Run status after polling (Phase 2):", {
          status: secondRunStatus.status,
          attempts: attempts2,
          threadId,
          runId: secondRunId,
        });

        if (secondRunStatus.status !== "completed") {
          console.warn(
            "‚ö†Ô∏è –§–∞–∑–∞ 2 –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø—ñ—à–Ω–æ:",
            secondRunStatus.status,
            secondRunStatus.last_error
          );
        }
      }

      // –ó–±–∏—Ä–∞—î–º–æ –∫—Ä–æ–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑—ñ –≤—Å—ñ—Ö –∑–∞–ø—É—Å–∫—ñ–≤, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è code interpreter
      let codeInterpreterUsed = false;
      let runStepsData: any[] = [];
      for (const rId of executedRuns) {
        try {
          const steps = await azureOpenAI.beta.threads.runs.steps.list(
            thread.id,
            rId
          );
          const currentSteps = steps.data || [];
          runStepsData = runStepsData.concat(currentSteps);
          for (const step of currentSteps) {
            const details: any =
              (step as any).step_details || (step as any).details;
            const toolCalls: any[] = details?.tool_calls || [];

            for (const tc of toolCalls) {
              const type = tc.type || tc?.tool_call_type;
              if (type === "code_interpreter" || type === "code") {
                codeInterpreterUsed = true;
                const outputs: any[] =
                  tc.code_interpreter?.outputs || tc.outputs || [];
                console.log(
                  "üîç code_interpreter outputs count:",
                  outputs?.length || 0
                );
                for (const out of outputs || []) {
                  const outType =
                    out?.type ||
                    (out?.image ? "image" : null) ||
                    (out?.logs ? "logs" : null) ||
                    (out?.file ? "file" : null);
                  const fileId =
                    out?.image?.file_id ||
                    out?.image_file?.file_id ||
                    out?.file?.file_id ||
                    out?.file_id ||
                    null;
                  console.log("üîç output item:", {
                    type: outType,
                    fileId,
                    keys: Object.keys(out || {}),
                  });
                }
              }
            }
          }
        } catch (e) {
          console.warn(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—Ä–æ–∫–∏ run –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ code interpreter:",
            e
          );
        }
      }
      console.log("üß™ Code Interpreter –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ:", codeInterpreterUsed);

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ thread
      const messages = await azureOpenAI.beta.threads.messages.list(thread.id);
      console.log("üß™ –í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É thread:", messages.data.length);
      for (const msg of messages.data) {
        const types = (msg.content || []).map((c: any) => c.type);
        const role = msg.role;
        console.log(`üß™ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è role=${role}, —Ç–∏–ø–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É:`, types);
      }

      // –ü—ñ–¥–±–∏—Ä–∞—î–º–æ –¢–ï–ö–°–¢ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞: –æ–±'—î–¥–Ω–∞—Ç–∏ –≤—Å—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ —á–∞—Å—Ç–∏–Ω–∏ –∑—ñ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
      const collectAssistantText = (): string => {
        const parts: string[] = [];
        for (const msg of messages.data) {
          if (msg.role !== "assistant") continue;
          const textParts = (msg.content || [])
            .filter((c: any) => c.type === "text" && c.text)
            .map((c: any) =>
              typeof c.text === "string" ? c.text : c.text.value
            )
            .filter(Boolean);
          if (textParts.length) {
            parts.push(textParts.join("\n").trim());
          }
        }
        const combined = parts.join("\n\n").trim();
        console.log(combined);
        console.log("üß™ –ó—ñ–±—Ä–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞, –¥–æ–≤–∂–∏–Ω–∞:", combined.length);
        return combined;
      };

      // –ó—ñ–±—Ä–∞—Ç–∏ –í–°–Ü –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —è–∫ image_file, –∑ —É—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
      const collectImageFileIds = (): string[] => {
        const ids: string[] = [];
        for (const msg of messages.data) {
          if (msg.role !== "assistant") continue;
          for (const c of msg.content || []) {
            if (c.type === "image_file" && c.image_file?.file_id) {
              ids.push(c.image_file.file_id);
            }
          }
        }
        return ids;
      };

      // NEW: –∑—ñ–±—Ä–∞—Ç–∏ image_file ID —ñ–∑ –∫—Ä–æ–∫—ñ–≤ run (outputs code_interpreter)
      const collectImageFileIdsFromSteps = (): string[] => {
        const ids: string[] = [];
        for (const step of runStepsData) {
          const details: any =
            (step as any).step_details || (step as any).details;
          const toolCalls: any[] = details?.tool_calls || [];
          for (const tc of toolCalls) {
            const type = tc.type || tc?.tool_call_type;
            if (type === "code_interpreter" || type === "code") {
              const outputs: any[] =
                tc.code_interpreter?.outputs || tc.outputs || [];
              for (const out of outputs || []) {
                // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
                const fileId =
                  out?.image?.file_id ||
                  out?.image_file?.file_id ||
                  out?.file?.file_id ||
                  out?.file_id ||
                  null;
                if (fileId) {
                  ids.push(String(fileId).replace(/^file-/, "file_"));
                }
              }
            }
          }
        }
        console.log("üß™ –ó—ñ–±—Ä–∞–Ω–æ image_file IDs —ñ–∑ run steps:", ids);
        return ids;
      };

      // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ image_file —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –≤ data URI
      const fetchImageDataUri = async (
        fileId: string
      ): Promise<string | null> => {
        try {
          const meta = await azureOpenAI.files.retrieve(fileId);
          const filename = (meta as any)?.filename || "";
          let mime = "image/png";
          const lower = filename.toLowerCase();
          if (lower.endsWith(".jpg") || lower.endsWith(".jpeg"))
            mime = "image/jpeg";
          else if (lower.endsWith(".png")) mime = "image/png";
          else if (lower.endsWith(".gif")) mime = "image/gif";
          else if (lower.endsWith(".webp")) mime = "image/webp";

          const fileResp: any = await azureOpenAI.files.content(fileId);
          let arrayBuffer: ArrayBuffer | null = null;
          if (typeof fileResp.arrayBuffer === "function") {
            arrayBuffer = await fileResp.arrayBuffer();
          } else if (fileResp?.data) {
            arrayBuffer = fileResp.data as ArrayBuffer;
          } else if (typeof fileResp.blob === "function") {
            const blob = await fileResp.blob();
            arrayBuffer = await blob.arrayBuffer();
          } else if (
            fileResp?.body &&
            typeof fileResp.body.arrayBuffer === "function"
          ) {
            arrayBuffer = await fileResp.body.arrayBuffer();
          }

          if (arrayBuffer) {
            const base64 = Buffer.from(arrayBuffer as any).toString("base64");
            const dataUri = `data:${mime};base64,${base64}`;
            console.log("üñºÔ∏è –û—Ç—Ä–∏–º–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞:", {
              fileId,
              filename,
              mime,
              size: (arrayBuffer as any).byteLength,
            });
            return dataUri;
          } else {
            console.warn(
              "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–π—Ç–∏ –∑ image_file –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:",
              { fileId }
            );
            return null;
          }
        } catch (e) {
          console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ image_file –∫–æ–Ω—Ç–µ–Ω—Ç:", e);
          return null;
        }
      };

      // –ó—ñ–±—Ä–∞—Ç–∏ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–∞–º–µ –∑ —Ü—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–∞ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π Markdown
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ–∫—Å—Ç –§–∞–∑–∏ 1 (combinedAssistantText)
      const responseText = combinedAssistantText;
      const messageImageIds = collectImageFileIds();
      const stepImageIds = collectImageFileIdsFromSteps();
      const imageFileIds = Array.from(
        new Set([...messageImageIds, ...stepImageIds])
      );
      console.log(
        "üß™ –ó–Ω–∞–π–¥–µ–Ω–æ image_file IDs (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è+–∫—Ä–æ–∫–∏):",
        imageFileIds
      );

      const imagesDataUris = (
        await Promise.all(imageFileIds.map((id) => fetchImageDataUri(id)))
      ).filter(Boolean) as string[];

      // –î–æ–¥–∞—Ç–∫–æ–≤–æ: –æ—Ç—Ä–∏–º–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—Ä–æ–∫–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
      try {
        const steps = await azureOpenAI.beta.threads.runs.steps.list(
          thread.id,
          run.id
        );
        console.log("üìã Run steps (completed):", {
          count: steps.data?.length ?? 0,
          statuses: (steps.data || []).map((s: any) => s.status),
        });
      } catch (e) {
        console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—Ä–æ–∫–∏ run –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:", e);
      }

      // 1) –Ø–∫—â–æ —î –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî –∑–∞–º—ñ–Ω–∏—Ç–∏ fenced code blocks –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
      let finalMarkdown = responseText;
      if (imagesDataUris.length > 0) {
        const codeBlockRegex = /```[\s\S]*?```/g;
        let imgIdx = 0;
        const replacedMarkdown = responseText.replace(codeBlockRegex, () => {
          const uri = imagesDataUris[imgIdx++];
          return uri ? `![diagram ${imgIdx}](${uri})` : ""; // —è–∫—â–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–æ–¥
        });

        // 2) –Ø–∫—â–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –±—ñ–ª—å—à–µ –Ω—ñ–∂ –∫–æ–¥-–±–ª–æ–∫—ñ–≤ ‚Äî –¥–æ–¥–∞—Ç–∏ —Ä–µ—à—Ç—É –≤ –∫—ñ–Ω—Ü—ñ
        const remainingImages = imagesDataUris
          .slice(imgIdx)
          .map((uri, i) => `![diagram ${imgIdx + i + 1}](${uri})`);

        finalMarkdown = [replacedMarkdown, ...remainingImages]
          .filter(Boolean)
          .join("\n\n");
      }

      // 2) –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ Markdown ‚Üí HTML –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
      const responseHtml = marked.parse(finalMarkdown);

      console.log(
        "‚úÖ –§–∞–∑–∞ 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–≤–µ—Ä—Ç–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç —ñ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –∑–∞–º—ñ—Å—Ç—å –∫–æ–¥—É.",
        {
          threadId,
          runId,
          imagesFound: imageFileIds.length,
          imagesEmbedded: imagesDataUris.length,
          elapsedMs: Date.now() - startedAt,
        }
      );

      return NextResponse.json(
        {
          success: true,
          response: finalMarkdown,
          responseHtml,
        },
        {
          status: 200,
          headers: {
            "X-Run-Status": "completed",
            "X-Thread-Id": threadId || "",
            "X-Run-Id": runId || "",
            "X-Attempts": String(attempts),
            "X-Elapsed-Ms": String(Date.now() - startedAt),
            "X-Image-Ids-Count": String(imageFileIds.length),
            "X-Images-Embedded-Count": String(imagesDataUris.length),
            "X-Response-Format": "markdown+html",
          },
        }
      );
    } else if (attempts >= maxAttempts) {
      console.error("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è run", {
        status: runStatus.status,
        attempts,
        elapsedMs: Date.now() - startedAt,
        threadId,
        runId,
      });
      return NextResponse.json(
        { success: false, error: "–¢–∞–π–º–∞—É—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É (120 —Å–µ–∫—É–Ω–¥)" },
        {
          status: 408,
          headers: {
            "X-Run-Status": String(runStatus.status),
            "X-Thread-Id": threadId || "",
            "X-Run-Id": runId || "",
            "X-Attempts": String(attempts),
            "X-Elapsed-Ms": String(Date.now() - startedAt),
          },
        }
      );
    }

    // –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å (requires_action, cancelling, —ñ–Ω—à–µ)
    console.error("‚ùì –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å run:", {
      status: runStatus.status,
      attempts,
      elapsedMs: Date.now() - startedAt,
      threadId,
      runId,
      last_error: runStatus.last_error,
      required_action: (runStatus as any).required_action || undefined,
    });

    return NextResponse.json(
      { success: false, error: "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –∞—Å–∏—Å—Ç–µ–Ω—Ç–æ–º" },
      {
        status: 500,
        headers: {
          "X-Run-Status": String(runStatus.status),
          "X-Thread-Id": threadId || "",
          "X-Run-Id": runId || "",
          "X-Attempts": String(attempts),
          "X-Elapsed-Ms": String(Date.now() - startedAt),
        },
      }
    );
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—É:", error);

    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞",
      },
      {
        status: 500,
        headers: {
          "X-Stage": "POST/generate-test catch",
          "X-Thread-Id": "",
          "X-Run-Id": "",
          "X-Error-Message":
            error instanceof Error ? error.message : "Unknown error",
        },
      }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: "API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î –∑ Azure Assistants API",
    endpoints: {
      POST: "/api/generate-test - –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å",
      GET: "/api/generate-test - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API",
    },
    supportedLevels: ["ecba", "ccba", "cbap"],
    supportedTestTypes: ["basic", "detailed", "babok", "practical"],
    features: [
      "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø—Ä–æ–º–ø—Ç—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
      "Azure Assistants API —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è",
      "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è threads —Ç–∞ runs",
      "–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Ç–∞–π–º–∞—É—Ç (120 —Å–µ–∫—É–Ω–¥)",
    ],
    assistantId: ASSISTANT_ID || "–Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π",
  });
}

import { NextRequest, NextResponse } from "next/server";
import jsPDF from "jspdf";
// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–π —à—Ä–∏—Ñ—Ç
import "../../../lib/fonts/noto-sans-font";

interface GeneratePDFRequest {
  level: "ecba" | "ccba" | "cbap";
  questionCount: number;
  language: string;
  questions: TestQuestion[];
  testType?: "basic" | "detailed" | "babok" | "practical";
}

interface TestQuestion {
  id: number;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
  knowledgeArea?: string;
  difficulty: "easy" | "medium" | "hard";
}

export async function POST(request: NextRequest) {
  try {
    console.log("üöÄ PDF Generation started");

    const body: GeneratePDFRequest = await request.json();

    if (!body.questions || body.questions.length === 0) {
      console.error("‚ùå No questions provided");
      return NextResponse.json(
        { success: false, error: "–ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –Ω–∞–¥–∞–Ω—ñ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ" },
        { status: 400 }
      );
    }

    console.log("üîÑ –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF...");

    // –°—Ç–≤–æ—Ä—é—î–º–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
      compress: true,
    });

    console.log("‚úÖ jsPDF –¥–æ–∫—É–º–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ");

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à—Ä–∏—Ñ—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∏—Ä–∏–ª–∏—Ü—ñ
    try {
      if (body.language === "ukrainian") {
        console.log("üî§ Setting Noto Sans font for Ukrainian");
        doc.setFont("NotoSans", "normal");
      } else {
        doc.setFont("helvetica", "normal");
      }
    } catch (fontError) {
      console.warn("‚ö†Ô∏è Font setting warning, using fallback:", fontError);
      doc.setFont("helvetica", "normal");
    }

    const localizedTexts = {
      english: {
        testTitle: `${body.level.toUpperCase()} Test Questions`,
        questionCount: `Total Questions: ${body.questions.length}`,
        createdDate: `Created: ${new Date().toLocaleDateString()}`,
        correctAnswer: "Correct Answer:",
        explanation: "Explanation:",
        knowledgeArea: "Knowledge Area:",
        difficulty: "Difficulty:",
        difficultyLevels: {
          easy: "Easy",
          medium: "Medium",
          hard: "Hard",
        },
      },
      ukrainian: {
        testTitle: `–ü–∏—Ç–∞–Ω–Ω—è —Ç–µ—Å—Ç—É ${body.level.toUpperCase()}`,
        questionCount: `–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å: ${body.questions.length}`,
        createdDate: `–°—Ç–≤–æ—Ä–µ–Ω–æ: ${new Date().toLocaleDateString("uk-UA")}`,
        correctAnswer: "–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:",
        explanation: "–ü–æ—è—Å–Ω–µ–Ω–Ω—è:",
        knowledgeArea: "–û–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω—å:",
        difficulty: "–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:",
        difficultyLevels: {
          easy: "–õ–µ–≥–∫–∞",
          medium: "–°–µ—Ä–µ–¥–Ω—è",
          hard: "–í–∞–∂–∫–∞",
        },
      },
    };

    const texts =
      localizedTexts[body.language as keyof typeof localizedTexts] ||
      localizedTexts.english;

    let currentY = 20;
    const pageHeight = 297;
    const margin = 20;
    const lineHeight = 7;

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º
    function addText(
      text: string,
      x: number,
      y: number,
      maxWidth: number = 170
    ): number {
      try {
        // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Unicode
        const normalizedText = text.normalize("NFC");
        const lines = doc.splitTextToSize(normalizedText, maxWidth);
        doc.text(lines, x, y);
        return y + lines.length * lineHeight;
      } catch (error) {
        console.warn("‚ö†Ô∏è Text processing warning:", error);
        // Fallback
        const lines = doc.splitTextToSize(text, maxWidth);
        doc.text(lines, x, y);
        return y + lines.length * lineHeight;
      }
    }

    function checkNewPage(requiredSpace: number = 30): void {
      if (currentY + requiredSpace > pageHeight - margin) {
        doc.addPage();
        currentY = margin;

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à—Ä–∏—Ñ—Ç –¥–ª—è –Ω–æ–≤–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        try {
          if (body.language === "ukrainian") {
            doc.setFont("NotoSans", "normal");
          } else {
            doc.setFont("helvetica", "normal");
          }
        } catch (error) {
          doc.setFont("helvetica", "normal");
        }
      }
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—É –∑ fallback
    function setFontSafe(font: string, style: string): void {
      try {
        if (body.language === "ukrainian" && font === "helvetica") {
          doc.setFont("NotoSans", style);
        } else {
          doc.setFont(font, style);
        }
      } catch (error) {
        console.warn(
          `‚ö†Ô∏è Font setting warning for ${font}:${style}, using fallback`
        );
        doc.setFont("helvetica", style);
      }
    }

    // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    doc.setFontSize(16);
    setFontSafe("helvetica", "bold");
    currentY = addText(texts.testTitle, margin, currentY);
    currentY += 10;

    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ—Å—Ç
    doc.setFontSize(12);
    setFontSafe("helvetica", "normal");
    currentY = addText(texts.questionCount, margin, currentY);
    currentY = addText(texts.createdDate, margin, currentY);
    currentY += 15;

    // –î–æ–¥–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
    body.questions.forEach((question, index) => {
      checkNewPage(50);

      // –ù–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è
      doc.setFontSize(14);
      setFontSafe("helvetica", "bold");
      currentY = addText(
        `${index + 1}. ${question.question}`,
        margin,
        currentY
      );
      currentY += 5;

      // –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
      doc.setFontSize(12);
      setFontSafe("helvetica", "normal");
      question.options.forEach((option, optionIndex) => {
        const optionLetter = String.fromCharCode(65 + optionIndex); // A, B, C, D
        currentY = addText(`${optionLetter}. ${option}`, margin + 10, currentY);
      });

      currentY += 5;

      // –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      doc.setFontSize(10);
      setFontSafe("helvetica", "bold");
      const correctLetter = String.fromCharCode(65 + question.correctAnswer);
      currentY = addText(
        `${texts.correctAnswer} ${correctLetter}`,
        margin + 10,
        currentY
      );

      // –ü–æ—è—Å–Ω–µ–Ω–Ω—è
      if (question.explanation) {
        setFontSafe("helvetica", "normal");
        currentY = addText(
          `${texts.explanation} ${question.explanation}`,
          margin + 10,
          currentY
        );
      }

      // –ú–µ—Ç–∞–¥–∞–Ω—ñ
      const metadata = [];
      if (question.knowledgeArea) {
        metadata.push(`${texts.knowledgeArea} ${question.knowledgeArea}`);
      }
      metadata.push(
        `${texts.difficulty} ${texts.difficultyLevels[question.difficulty]}`
      );

      if (metadata.length > 0) {
        doc.setFontSize(8);
        doc.setTextColor(128, 128, 128); // –°—ñ—Ä–∏–π –∫–æ–ª—ñ—Ä
        currentY = addText(metadata.join(" | "), margin + 10, currentY);
        doc.setTextColor(0, 0, 0); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —á–æ—Ä–Ω–∏–π
      }

      currentY += 15;
    });

    console.log("üìù PDF content generated successfully with Noto Sans font");

    // –ì–µ–Ω–µ—Ä—É—î–º–æ PDF —è–∫ ArrayBuffer
    const pdfArrayBuffer = doc.output("arraybuffer");

    console.log("‚úÖ PDF generated successfully");

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ PDF —è–∫ blob response
    return new NextResponse(pdfArrayBuffer, {
      status: 200,
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="${
          body.level
        }-test-${Date.now()}.pdf"`,
      },
    });
  } catch (error) {
    const err = error as Error;
    console.error("‚ùå PDF Generation Error:", err);
    console.error("‚ùå Full error details:", {
      message: err.message,
      stack: err.stack,
      name: err.name,
    });

    return NextResponse.json(
      {
        success: false,
        error: "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF",
        details: err.message,
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: "PDF Generation API is working with Noto Sans font support",
    timestamp: new Date().toISOString(),
  });
}
